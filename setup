#!/bin/bash

user_array=(01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40)

#===================================================
function check_qemu_version() {
	echo "========================="
	echo ">>> qemu-arm-static 버전 확인"
	if ! command -v qemu-arm-static > /dev/null 2>&1; then
        echo "qemu-arm-static 명령을 찾을 수 없습니다"
        return 2  # 명령 없음
    fi

    # 버전 문자열 추출
    version_str=$(qemu-arm-static --version | grep -oE '[0-9]+\.[0-9]+(\.[0-9]+)?' | head -n 1)

    if [ -z "$version_str" ]; then
        echo "빈문자열 - 버전을 추출할 수 없습니다"
        return 2  # 버전 파싱 실패
    fi

    # 기준 버전과 비교
    base_version="6.2.0"
    if dpkg --compare-versions "$version_str" le "$base_version"; then
	echo ">>> 버전 6.2.0 이하 -> 현 상태 유지"
        return 1  # 6.2.0 이하
    else
        echo ">>> 버전 $version_str -> 6.2.0으로 다운그레이드"
	return 0  # 6.2.0 초과
    fi
}

#===================================================
function downgrade_qemu() {

# version 6.2.0보다 새로운 버전이므로 6.2.0으로 downgrade
# 아키텍쳐를 확인하여 그에 맞는 팩케지 다운로드
# 아키텍쳐 확인은 dpkg와 uname을 모두 사용

# 1. armhf / armv7l -> armhf.deb
# 2. arm64 / aarch64 -> arm64.deb
# 3. amd64 / x86_64 -> amd64.deb

# 순서는 아래와 같이
# 1. 관련 서비스 중단
# 2. 현재의 qemu 제거
# 3. 각각의 아키텍쳐에 맞는 QEMU 6.2 팩케지 설정
# 4. 다운로드 및 설치
# 5. 의존성 자동 해결
# 6. 자동 업그레이드 방지
# 7. 관련 서비스 재시작

#!/bin/bash

# 서비스 이름
SERVICE_NAME="md380-emu.service analog_bridge.service mmdvm_bridge.service"

# 등록한 추가사용자 확인 및 서비스 추가
user_array=(01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40)

for user in "${user_array[@]}"; do
	source /var/lib/dvswitch/dvs/var${user}.txt > /dev/null 2>&1
	if [ -e /var/lib/dvswitch/dvs/var${user}.txt ] && [ x${call_sign} != x ]; then
		SERVICE_NAME+=" md380-emu${user}.service"
		SERVICE_NAME+=" analog_bridge${user}.service"
		SERVICE_NAME+=" mmdvm_bridge${user}.service"
	fi
done

# 아키텍처 정보 확인
ARCH_DPKG=$(dpkg --print-architecture)  # 예: armhf, arm64, amd64
ARCH_UNAME=$(uname -m)                  # 예: armv7l, aarch64, x86_64

echo "dpkg 아키텍처: $ARCH_DPKG"
echo "uname 아키텍처: $ARCH_UNAME"

# Step 1. 관련 서비스 중단
echo ">>> 서비스 중단: $SERVICE_NAME"
sudo systemctl stop $SERVICE_NAME

# Step 2. 기존 QEMU 제거
echo ">>> 기존 qemu-user-static 제거"
sudo apt purge -y qemu-user-static
sudo apt autoremove -y

# Step 3. 아키텍처별 설치 파일 설정
echo ">>> architecture별 qemu 팩케지 준비"
QEMU_DEB_URL=""
if [[ "$ARCH_DPKG" == "armhf" || "$ARCH_UNAME" == "armv7l" ]]; then
    QEMU_DEB_URL="https://snapshot.debian.org/archive/debian/20220307T144557Z/pool/main/q/qemu/qemu-user-static_6.2+dfsg-2_armhf.deb"
elif [[ "$ARCH_DPKG" == "arm64" || "$ARCH_UNAME" == "aarch64" ]]; then
    QEMU_DEB_URL="https://snapshot.debian.org/archive/debian/20220307T144557Z/pool/main/q/qemu/qemu-user-static_6.2+dfsg-2_arm64.deb"
elif [[ "$ARCH_DPKG" == "amd64" || "$ARCH_UNAME" == "x86_64" ]]; then
    QEMU_DEB_URL="https://snapshot.debian.org/archive/debian/20220307T144557Z/pool/main/q/qemu/qemu-user-static_6.2+dfsg-2_amd64.deb"
else
    echo "지원되지 않는 아키텍처입니다: $ARCH_DPKG / $ARCH_UNAME"
    return 1
fi

# Step 4. QEMU 6.2 설치
echo ">>> QEMU 6.2 패키지 다운로드 및 설치"
cd /tmp
wget -O qemu-user-static.deb "$QEMU_DEB_URL" || { echo "다운로드 실패"; return 1; }
sudo dpkg -i qemu-user-static.deb

# Step 5. 의존성 자동 해결
echo ">>> 의존성 자동 해결"
sudo apt -f install -y

# Step 6. 자동 업그레이드 방지
echo ">>> qemu-user-static 자동 업그레이드 차단"
sudo apt-mark hold qemu-user-static

# Step 7. 관련 서비스 재시작
echo ">>> 서비스 재시작: $SERVICE_NAME"
sudo systemctl restart $SERVICE_NAME

# 확인
echo ">>> 설치된 QEMU 버전"
qemu-arm-static --version
echo ">>> 파일 확인"
ls /usr/bin/qemu-arm-static
}
#===================================================
function run_buster() {
	echo "========================="
	echo ">>> Running buster()"
	sudo apt update -y
	cd /tmp
	wget http://dvswitch.org/buster
	chmod +x buster
	sudo ./buster
	sudo apt-get install dvswitch-server -y
	if [ ! -f /opt/md380-emu/md380-emu ]; then
		apt-get install md380-emu
	fi
}
#===================================================
function run_bookworm() {
	echo "========================="
	echo ">>> Running bookworm()"
	sudo apt update -y
	cd /tmp
	wget http://dvswitch.org/bookworm
	chmod +x bookworm
	sudo ./bookworm
	sudo apt-get install dvswitch-server -y
	if [ ! -f /opt/md380-emu/md380-emu ]; then
		apt-get install md380-emu
	fi
}
#===================================================
function check_ARCHITECTURE() {
# dvswitch-server가 설치되지 않았다고 판별되었으므로
# 아키텍쳐를 확인하여 그에 맞게 팩케지 준비

# 1.   armhf이면 buster
# 2-1. arm64이고 debian 12이상이면 bookworm
# 2-2. arm64이고 debian 12 이상이 아니면 buster
# 3-1. amd64이고 버전이 22.04이상이면 bookworm
# 3-2. amd64이고 버전이 22.04이상이 아니면 buster

echo "========================="
echo ">>> architecture 확인"

# 아키텍처 정보
ARCH_DPKG=$(dpkg --print-architecture)   # 예: armhf, arm64, amd64
ARCH_UNAME=$(uname -m)                   # 예: armv7l, aarch64, x86_64

# 배포판 정보
source /etc/os-release
OS_ID=$ID              # 예: debian, ubuntu
OS_VERSION=$VERSION_ID # 예: "12", "22.04", "11"
MAJOR_VERSION=$(echo "$OS_VERSION" | cut -d. -f1)  # "22.04" → 22
#-------------------------
# 버전 비교 함수
version_ge() {
    dpkg --compare-versions "$1" ge "$2"
}
#-------------------------
# 아키텍처 및 배포판 기반 분기
if [[ "$ARCH_DPKG" == "armhf" || "$ARCH_UNAME" == "armv7l" ]]; then
    echo "32비트 ARM 시스템"
    return 0 #run_buster

elif [[ "$ARCH_DPKG" == "arm64" || "$ARCH_UNAME" == "aarch64" ]]; then
    echo "64비트 ARM 시스템"
	if [[ "$OS_ID" == "debian" || "$OS_ID" == "raspbian" ]]; then
    	if [ "$MAJOR_VERSION" -ge 12 ]; then
        	echo "debian 12 이상 - bookworm 설치"
		return 1 #run_bookworm
    	else
        	echo "debian 12 미만 - buster 설치"
		return 0 #run_buster
    	fi
	fi

elif [[ "$ARCH_DPKG" == "amd64" || "$ARCH_UNAME" == "x86_64" ]]; then
    echo "64비트 PC 시스템"
    if [[ "$OS_ID" == "ubuntu" ]] && version_ge "$OS_VERSION" "22.04"; then
	echo "ubuntu 22.04 이상 - bookworm 설치"
	return 1
    else
        echo "ubuntu 22.04 미만 - buster 설치"
	return 0
    fi
fi
}
#===================================================
function check_dvswitch() {
echo "========================="
echo ">>> dvswitch-server 의 설치가 되었는지 확인"
if dpkg -l | grep -q "^ii  dvswitch-server"; then
        return 0 # yes
else
        return 1 # no
fi
}
#====== installation_apps =============================================
function installation_apps() {
echo "========================="
echo ">>> multitail, htop 설치"
sudo apt-get install multitail -y

sudo apt install htop -y

# replace temp.sh with a file for Korean
sudo wget -O /usr/local/dvs/temp.sh https://raw.githubusercontent.com/hl5btf/DVSwitch/main/temp.sh
sudo chmod +x /usr/local/dvs/temp.sh
}

#====== set_path =============================================
function set_path() {
echo "========================="
echo ">>> set path"
file="/etc/profile"

# 추가할 디렉토리 목록
read -r -d '' new_dirs << 'EOF'
/opt/MMDVM_Bridge
/usr/local/dvs
EOF

# 1. 기존 PATH 라인들 모두 추출
existing_path_lines=$(grep -n '^export PATH=' "$file" | cut -d: -f1)

# 2. 기존 경로 모으기
existing_paths=""
for line_no in $existing_path_lines; do
    line=$(sed -n "${line_no}p" "$file")
    # $PATH:$dir1:$dir2 형식에서 실제 경로만 추출
    paths=$(echo "$line" | sed -E 's/^export PATH=\$PATH:?//; s/["]//g' | tr ':' '\n')
    for path in $paths; do
        existing_paths="$existing_paths"$'\n'"$path"
    done
done

# 3. 새로 추가할 디렉토리와 기존 경로들을 하나로 정리
all_paths="$existing_paths"
for dir in $new_dirs; do
    all_paths="$all_paths"$'\n'"$dir"
done

# 4. 중복 제거 + 다시 PATH 라인으로 조립
unique_paths=$(echo "$all_paths" | grep -v '^$' | sort -u | tr '\n' ':' | sed 's/:$//')
new_export_line="export PATH=\$PATH:$unique_paths"

# 5. 기존 PATH 라인 모두 삭제
if [ -n "$existing_path_lines" ]; then
    sudo sed -i '/^export PATH=/d' "$file"
fi

# 6. 새 export PATH 줄 추가
echo "$new_export_line" | sudo tee -a "$file" > /dev/null
}

#====== set_alias =============================================
function set_alias() {
echo "========================="
echo ">>> set alias"
BASHRC="/etc/bash.bashrc"

# 추가할 alias 목록
read -r -d '' ALIASES << 'EOF'
alias dv="cd /usr/local/dvs"
alias data="cd /var/lib/dvswitch/dvs"
alias adv="cd /var/lib/dvswitch/dvs/adv"
alias user="cd /var/lib/dvswitch/dvs/adv"
alias lan="cd /var/lib/dvswitch/dvs/lan"
alias tgdb="cd /var/lib/dvswitch/dvs/tgdb"
alias ab="cd /opt/Analog_Bridge"
alias mb="cd /opt/MMDVM_Bridge"
alias ar="cd /opt/Analog_Reflector"
alias log="cd /var/log/dvswitch"
EOF

# 하나씩 확인하며, 기존에 없는 alias만 추가

while read -r line; do
    if ! grep -Fxq "$line" "$BASHRC"; then
        echo "$line" | sudo tee -a "$BASHRC" > /dev/null
    fi
done <<< "$ALIASES"
}

#====== copy_files_for_userXX =============================================
function copy_files_for_userXX() {
echo "========================="
echo ">>> copy files for userXX"
files="analog_bridge00.service md380-emu00.service mmdvm_bridge00.service var00.txt"

dir=/var/lib/dvswitch/dvs
for file in $files; do
sudo wget -O ${dir}/$file https://raw.githubusercontent.com/hl5btf/DVSMU/main/$file
sudo chmod +x ${dir}/$file
done


sudo mkdir /var/lib/dvswitch/dvs/adv/user00
files="dvsm.adv dvsm.basic dvsm.macro dvsm.sh"

dir=/var/lib/dvswitch/dvs/adv/user00
for file in $files; do
sudo wget -O ${dir}/$file https://raw.githubusercontent.com/hl5btf/DVSMU/main/$file
sudo chmod +x ${dir}/$file
done


sudo mkdir /var/lib/dvswitch/dvs/adv/user00EN
sudo mkdir /var/lib/dvswitch/dvs/adv/user00KR

files="adv_audio.txt adv_dmr.txt adv_hotspot.txt adv_main.txt adv_managetg.txt adv_resetfvrt.txt adv_rxgain.txt adv_tgref.txt adv_tools.txt adv_txgain.txt"

for file in $files; do
sudo wget -O /var/lib/dvswitch/dvs/adv/user00EN/$file https://raw.githubusercontent.com/hl5btf/DVSMU/main/EN/$file
sudo wget -O /var/lib/dvswitch/dvs/adv/user00KR/$file https://raw.githubusercontent.com/hl5btf/DVSMU/main/KR/$file
done
}

#====== change_freq_of_all_users =============================================
function change_freq_of_all_users() {
echo "========================="
echo ">>> change freq of all users"
# 주파수가 00000 일 경우에만, 430으로 수정

source /var/lib/dvswitch/dvs/var.txt > /dev/null 2>&1
    file=/var/lib/dvswitch/dvs/var.txt
    tag=rx_freq; value=430000000
    sudo sed -i -e "/^$tag=/ c $tag=$value" $file
    tag=tx_freq; value=430000000
    sudo sed -i -e "/^$tag=/ c $tag=$value" $file

source /var/lib/dvswitch/dvs/var00.txt > /dev/null 2>&1
    file=/var/lib/dvswitch/dvs/var00.txt
    tag=rx_freq; value=430000000
    sudo sed -i -e "/^$tag=/ c $tag=$value" $file
    tag=tx_freq; value=430000000
    sudo sed -i -e "/^$tag=/ c $tag=$value" $file

source /opt/MMDVM_Bridge/MMDVM_Bridge.ini > /dev/null 2>&1
    update_ini="sudo /opt/MMDVM_Bridge/dvswitch.sh updateINIFileValue"
        file=/opt/MMDVM_Bridge/MMDVM_Bridge.ini
        section=Info; tag=RXFrequency; value=430000000
        $update_ini $file $section $tag $value
        section=Info; tag=TXFrequency; value=430000000
        $update_ini $file $section $tag $value

for user in "${user_array[@]}"; do
source /var/lib/dvswitch/dvs/var${user}.txt > /dev/null 2>&1
if [ -e /var/lib/dvswitch/dvs/var${user}.txt ] && [ x${call_sign} != x ]; then
        update_ini="sudo /opt/user${user}/dvswitch.sh updateINIFileValue"    
        file=/var/lib/dvswitch/dvs/var${user}.txt
        tag=rx_freq; value=430000000
        sudo sed -i -e "/^$tag=/ c $tag=$value" $file
        tag=tx_freq; value=430000000
        sudo sed -i -e "/^$tag=/ c $tag=$value" $file

    source /opt/user${user}/MMDVM_Bridge.ini > /dev/null 2>&1
        file=/opt/user${user}/MMDVM_Bridge.ini
        section=Info; tag=RXFrequency; value=430000000
        $update_ini $file $section $tag $value
        section=Info; tag=TXFrequency; value=430000000
        $update_ini $file $section $tag $value
fi
done
}

#====== set_sudo_nopasswd =============================================
function set_sudo_nopasswd() {
echo "========================="
echo ">>> set sudo nopasswd"
# === 일반 사용자만 sudo NOPASSWD로 추가 (메인 sudoers 수정, 중복 방지) ===

# 1) 일반 사용자(UID 1000~65533) 목록 가져오기
USERS=$(awk -F: '$3>=1000 && $3<65534 {print $1}' /etc/passwd)

#  사용자 계정을 찾지 못했다면
if [ -z "$USERS" ]; then
    return 1
fi

# 2) sudoers 백업
sudo cp /etc/sudoers /etc/sudoers.bak.$(date +%Y%m%d%H%M%S)

# 3) 추가할 사용자 중 이미 등록되지 않은 사용자만 필터링
NEED_ADD=""
for user in $USERS; do
    if sudo grep -q "^$user ALL=(ALL) NOPASSWD:ALL" /etc/sudoers; then
        : # $user 이미 sudoers에 등록됨 → 건너뜀
    else
        # $user 신규 추가
        NEED_ADD="$NEED_ADD$user"$'\n'
    fi
done

# 신규 추가 대상이 없으면 종료
if [ -z "$NEED_ADD" ]; then
    return 0
fi

# 4) 메인 sudoers에 추가할 내용 준비
TMPFILE=$(mktemp)
echo "# >>> Custom NOPASSWD users (자동 추가)" > "$TMPFILE"
printf "%s" "$NEED_ADD" | while read -r u; do
    [ -n "$u" ] && echo "$u ALL=(ALL) NOPASSWD:ALL" >> "$TMPFILE"
done
echo >> "$TMPFILE"  # 마지막 빈줄

# 5) visudo를 이용해 안전하게 sudoers 업데이트
sudo bash -c "EDITOR='tee -a' visudo < '$TMPFILE'"

# 6) 임시파일 지우기
rm "$TMPFILE"

# sudo visudo 로 확인하면 내용이 반영되어 있음
}

#====== download_and_update_apps =============================================
function download_and_update_apps() {
echo "========================="
echo ">>> download apps (dvsmu man_log DMRIds_chk.sh bm_watchdog.sh config_main_user.sh auto_upgrade.sh)"
files="dvsmu man_log DMRIds_chk.sh bm_watchdog.sh config_main_user.sh auto_upgrade.sh"

for file in $files; do
sudo wget -O /usr/local/dvs/$file https://raw.githubusercontent.com/hl5btf/DVSMU/main/$file
sudo chmod +x /usr/local/dvs/$file
done

# 필요시 아래와 같이 다운로드 가능
# sudo wget -O /usr/local/dvs/dvsmu https://raw.githubusercontent.com/hl5btf/DVSMU/main/dvsmu
# sudo wget -O /usr/local/dvs/man_log https://raw.githubusercontent.com/hl5btf/DVSMU/main/man_log
# sudo wget -O /usr/local/dvs/DMRIds_chk.sh https://raw.githubusercontent.com/hl5btf/DVSMU/main/DMRIds_chk.sh
}


#====== set_crontab =============================================
function set_crontab() {
echo "========================="
echo ">>> set crontab"
FILE_CRON=/etc/crontab

value_time=$(grep -oP 'time=\K[^#\s]+' "$FILE_CRON")

if [ -z "$value_time" ]; then value_time=5; fi

if grep -q "reboot" "$FILE_CRON"; then
        value_reboot=$(grep -oP 'reboot=\K[^#\s]+' "$FILE_CRON")
fi


sudo sed -i '/time/d' "$FILE_CRON"
sudo sed -i '/reboot/d' "$FILE_CRON"
sudo sed -i '/man_log/d' "$FILE_CRON"
sudo sed -i '/DMRIds_chk.sh/d' "$FILE_CRON"
sudo sed -i '/bm_watchdog.sh/d' "$FILE_CRON"
sudo sed -i '/auto_upgrade.sh/d' "$FILE_CRON"


echo "#time=$value_time" | sudo tee -a $FILE_CRON

if [ "$value_reboot" = "yes" ]; then
        echo "#reboot=yes" | sudo tee -a $FILE_CRON
else
        echo "#reboot=no" | sudo tee -a $FILE_CRON
fi

echo "0 $value_time * * * root flock -n /var/lock/man_log.lock /usr/local/dvs/man_log" | sudo tee -a $FILE_CRON
echo "28 6 * * * root flock -n /var/lock/DMRIds_chk.lock /usr/local/dvs/DMRIds_chk.sh" | sudo tee -a $FILE_CRON
echo "*/5 * * * * root flock -n /var/lock/bm_watchdog.lock /usr/local/dvs/bm_watchdog.sh" | sudo tee -a $FILE_CRON
echo "3 3 * * * root flock -n /var/lock/auto_upgrade.lock /usr/local/dvs/auto_upgrade.sh" | sudo tee -a $FILE_CRON
}

#====== add_variables =============================================
function add_variables() {
echo "========================="
echo ">>> add variables"
#sudo wget -O /var/lib/dvswitch/dvs/var00.txt https://raw.githubusercontent.com/hl5btf/DVSMU/main/var00.txt
# 기존에 있는 변수는 값을 변경하지 않는다. (사용자가 변경한 값을 유지하도록)
# 기존에 있는 변수의 값을 변경하려면 update_var 을 사용해야 한다.
# each item needs space in between. if the item is character, it needs quotation marks.

new_var="txgain_asl txgain_stfu txgain_intercom original_bm_address"

new_val=(0.35 0.35 0.35 "")

function do_add() {
for var in ${new_var}; do
    if ! sudo grep -q "^$var" "$file"; then        
                echo "$var=" | sudo tee -a $file
                val=${new_val[$n]}
                sudo sed -i -e "/^$var=/ c $var=$val" $file
    fi
        n=$(($n+1))
done
}

file=/var/lib/dvswitch/dvs/var.txt
    do_add; n=0

file=/var/lib/dvswitch/dvs/var00.txt
    do_add; n=0

for user in "${user_array[@]}"; do
source /var/lib/dvswitch/dvs/var${user}.txt > /dev/null 2>&1
if [ -e /var/lib/dvswitch/dvs/var${user}.txt ] && [ x${call_sign} != x ]; then
    file=/var/lib/dvswitch/dvs/var${user}.txt
    do_add; n=0
fi
done
}

#=======================
# MAIN SCRIPT
#=======================
(
# --- dvswitch-server가 설치되었는지 확인
check_dvswitch
rtn1=$?
# --- 설치되지 않았으면 장치의 아키텍쳐 확인 - 설치 준비
if [ "$rtn1" -eq 0 ]; then
        echo ">>> dvswitch-server가 설치되어 있음."
	rtn2=999
elif [ "$rtn1" -eq 1 ]; then
        echo ">>> dvswitch-server가 설치되지 않았음."
        check_ARCHITECTURE
        rtn2=$?
fi
# --- 아키텍쳐에 맞게 dvswitch-server 설치
if [ "$rtn2" -eq 0 ]; then
        run_buster
elif [ "$rtn2" -eq 1 ]; then
        run_bookworm
fi
# --- qemu-arm-static 버전 확인
check_qemu_version
rtn=$?
# --- 버전 6.2.0 보다 최신이면 downgrade to 6.2.0
if [ "$rtn" -eq 0 ]; then
	downgrade_qemu
fi

installation_apps
source /var/lib/dvswitch/dvs/var.txt
set_path
set_alias
copy_files_for_userXX
change_freq_of_all_users
set_sudo_nopasswd

# 아래 3개는 Github hl5btf/DVSMU/upgrade.sh와 동일 (수정시 동일하게 수정해야 함)
download_and_update_apps
set_crontab
add_variables
) > /dev/null 2>&1 &

echo
echo -n "약 5분 소요. 완료되면 리부팅합니다."
echo -e "\n"

while kill -0 $! 2>/dev/null; do
    echo -n "#"
    sleep 1
done

echo -e "\n"
echo "설정이 완료되었습니다."
echo
sudo rm setup
echo "ENTER를 누르면 리부팅합니다."
echo
read
sudo reboot
exit 0

